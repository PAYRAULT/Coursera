# Ou aller chercher le compilo... Avec un / a la fin
BINDIR=
CAMLC=$(BINDIR)ocamlc
CAMLDEP=$(BINDIR)ocamldep
CAMLLEX=$(BINDIR)ocamllex
CAMLYACC=$(BINDIR)ocamlyacc
CAMLFIND=$(BINDIR)ocamlfind

# User definitions must be here
EXEC = logappend
SOURCES = crypt_util.ml gallery.ml parserlist.ml logappend.ml
GENERATED = parser.ml lexer.ml
OBJS =  parserlist.cmo crypt_util.cmo gallery.cmo \
parser.cmo lexer.cmo \
logappend.cmo

EXEC2 = logread
SOURCES2 = crypt_util.ml gallery.ml logread.ml 
GENERATED2 = 
OBJS2 = crypt_util.cmo gallery.cmo logread.cmo

# Building the world
all: $(EXEC2) $(EXEC)

$(EXEC): $(OBJS)
	$(CAMLC) -custom -I +cryptokit unix.cma nums.cma cryptokit.cma $(OBJS) -o $(EXEC) 

$(EXEC2): $(OBJS2)
	$(CAMLC) -custom -I +cryptokit unix.cma nums.cma cryptokit.cma $(OBJS2) -o $(EXEC2) 

.SUFFIXES:
.SUFFIXES: .ml .mli .cmo .cmi .cmx
.SUFFIXES: .mll .mly

.ml.cmo:
	$(CAMLFIND) $(CAMLC) -linkpkg -thread -package cryptokit -c $<

.mli.cmi:
	$(CAMLC) -c $<

.mll.ml:
	$(CAMLLEX) $<

.mly.ml:
	$(CAMLYACC) $<

# Clean up
clean:
	rm -f *.cm[io] *.cmx *~ .*~ #*# *.o
	rm -f parser.mli
	rm -f $(GENERATED2) $(GENERATED)
	rm -f $(EXEC2) $(EXEC)

# Dependencies
depend: $(SOURCES2) $(GENERATED2) $(SOURCES) $(GENERATED) parser.mli
	$(CAMLDEP) $(SOURCES2) $(GENERATED2) $(SOURCES) $(GENERATED) parser.mli > .depend

include .depend
