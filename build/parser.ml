type token =
  | IDENT of (string)
  | INT of (int)
  | OPT_K
  | OPT_T
  | OPT_A
  | OPT_L
  | OPT_G
  | OPT_E
  | OPT_R
  | EOL
  | EOF

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Parserlist ;;

  let token = ref "";;
  let log_file_name = ref "";;
  let employee = ref "";;
  let guest = ref "";;
  let time_stamp = ref (-1);;
  let room = ref (-1);;
  let arrival = ref false;;
  let leave = ref false;;

  let lst = ref [];;
    
  let const_elem () =
    let elem = 
      {
	log_file_name = !log_file_name;
	token = !token;
	time_stamp = !time_stamp;
	employee = !employee;
	guest = !guest;
	room = !room;
	arrival = !arrival;
	leave = !leave;
      }
    in
    lst := elem :: !lst;
    token := "";
    log_file_name := "";
    employee := "";
    guest := "";
    time_stamp := -1;
    room := -1;
    arrival := false;
    leave := false;
  ;;
# 54 "parser.ml"
let yytransl_const = [|
  259 (* OPT_K *);
  260 (* OPT_T *);
  261 (* OPT_A *);
  262 (* OPT_L *);
  263 (* OPT_G *);
  264 (* OPT_E *);
  265 (* OPT_R *);
  266 (* EOL *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* IDENT *);
  258 (* INT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\005\000\005\000\000\000"

let yylen = "\002\000\
\002\000\002\000\001\000\003\000\002\000\001\000\002\000\002\000\
\001\000\001\000\002\000\002\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\009\000\010\000\000\000\000\000\
\000\000\014\000\000\000\003\000\000\000\000\000\007\000\008\000\
\012\000\011\000\013\000\001\000\002\000\000\000\005\000\004\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\013\000\014\000"

let yysindex = "\255\255\
\255\254\000\000\008\255\009\255\000\000\000\000\011\255\012\255\
\013\255\000\000\001\000\000\000\015\255\255\254\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\016\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\003\000\004\000\000\000"

let yytablesize = 266
let yytable = "\001\000\
\020\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\015\000\024\000\016\000\017\000\018\000\021\000\019\000\022\000\
\006\000\023\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\004\000\005\000\006\000\007\000\
\008\000\009\000"

let yycheck = "\001\000\
\000\000\003\001\004\001\005\001\006\001\007\001\008\001\009\001\
\001\001\010\001\002\001\001\001\001\001\011\000\002\001\001\001\
\001\001\014\000\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\006\001\007\001\
\008\001\009\001"

let yynames_const = "\
  OPT_K\000\
  OPT_T\000\
  OPT_A\000\
  OPT_L\000\
  OPT_G\000\
  OPT_E\000\
  OPT_R\000\
  EOL\000\
  EOF\000\
  "

let yynames_block = "\
  IDENT\000\
  INT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lines) in
    Obj.repr(
# 57 "parser.mly"
                                                 ( !lst )
# 198 "parser.ml"
               : Parserlist.elem list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'lines) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'line) in
    Obj.repr(
# 61 "parser.mly"
                                       ( const_elem())
# 206 "parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line) in
    Obj.repr(
# 62 "parser.mly"
                                       ( const_elem())
# 213 "parser.ml"
               : 'lines))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'opts) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 66 "parser.mly"
                                       ( log_file_name := _2)
# 221 "parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'opt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'opts) in
    Obj.repr(
# 70 "parser.mly"
                                                ( )
# 229 "parser.ml"
               : 'opts))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'opt) in
    Obj.repr(
# 71 "parser.mly"
                                                ( )
# 236 "parser.ml"
               : 'opts))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 75 "parser.mly"
                                                ( token := _2 )
# 243 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
                                                ( time_stamp := _2)
# 250 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 77 "parser.mly"
                                                ( arrival := true )
# 256 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    Obj.repr(
# 78 "parser.mly"
                                                ( leave := true )
# 262 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 79 "parser.mly"
                                                ( employee := _2 )
# 269 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 80 "parser.mly"
                                                ( guest := _2 )
# 276 "parser.ml"
               : 'opt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 81 "parser.mly"
                                                ( room := _2 )
# 283 "parser.ml"
               : 'opt))
(* Entry toplevel *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let toplevel (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Parserlist.elem list)
